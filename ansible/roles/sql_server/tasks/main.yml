---
- name: Create temp directory for SQL Server installation
  ansible.windows.win_file:
    path: C:\sql_server_install
    state: directory

- name: Download SQL Server 2022 Developer Edition
  ansible.windows.win_get_url:
    url: "https://go.microsoft.com/fwlink/?linkid=866658"
    dest: C:\sql_server_install\SQLServer.exe
  register: download_result
  until: download_result is succeeded
  retries: 3
  delay: 5

- name: Extract SQL Server installation files
  ansible.windows.win_shell: |
    Start-Process -FilePath "C:\sql_server_install\SQLServer.exe" -ArgumentList "/q", "/x:C:\sql_server_install\extracted" -Wait
  args:
    creates: C:\sql_server_install\extracted

- name: Create SQL Server configuration file
  ansible.windows.win_copy:
    dest: C:\sql_server_install\configuration.ini
    content: |
      [OPTIONS]
      ACTION="Install"
      FEATURES=SQLENGINE
      INSTANCENAME="MSSQLSERVER"
      SQLSVCACCOUNT="NT Service\MSSQLSERVER"
      SQLSYSADMINACCOUNTS="BUILTIN\Administrators"
      SQLBACKUPDIR="{{ sql_server_backup_dir }}"
      SQLUSERDBDIR="{{ sql_server_data_dir }}"
      SQLUSERDBLOGDIR="{{ sql_server_log_dir }}"
      SQLTEMPDBDIR="{{ sql_server_data_dir }}"
      SQLTEMPDBLOGDIR="{{ sql_server_log_dir }}"
      IACCEPTSQLSERVERLICENSETERMS="True"

- name: Install SQL Server Developer Edition
  ansible.windows.win_shell: |
    Start-Process -FilePath "C:\sql_server_install\extracted\setup.exe" -ArgumentList "/ConfigurationFile=C:\sql_server_install\configuration.ini", "/IACCEPTSQLSERVERLICENSETERMS", "/QUIETSIMPLE" -Wait
  args:
    creates: C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER

- name: Configure SQL Server to allow remote connections
  ansible.windows.win_shell: |
    # Enable TCP/IP Protocol
    $smo = [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.Smo")
    $wmi = [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.SqlWmiManagement")

    $uri = "ManagedComputer[@Name='$(hostname)']/ServerInstance[@Name='MSSQLSERVER']/ServerProtocol[@Name='Tcp']"
    $computerName = $env:COMPUTERNAME
    $moc = New-Object Microsoft.SqlServer.Management.Smo.Wmi.ManagedComputer $computerName
    $tcp = $moc.GetSmoObject($uri)
    $tcp.IsEnabled = $true
    $tcp.Alter()

    # Restart SQL Server service
    Restart-Service -Name "MSSQLSERVER" -Force

- name: Cleanup installation files
  ansible.windows.win_file:
    path: C:\sql_server_install
    state: absent

# Configure scheduled backups to prevent data loss and maintain activity
- name: Create backup script directory
  ansible.windows.win_file:
    path: C:\SQLScripts
    state: directory

- name: Create SQL Server backup script
  ansible.windows.win_copy:
    dest: C:\SQLScripts\backup_databases.ps1
    content: |
      # SQL Server Backup Script
      $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
      $backupDir = "{{ sql_server_backup_dir }}"
      
      # Ensure backup directory exists
      if (-not (Test-Path $backupDir)) {
          New-Item -Path $backupDir -ItemType Directory -Force
      }
      
      # Connect to SQL Server and get all user databases
      $sqlConn = New-Object System.Data.SqlClient.SqlConnection
      $sqlConn.ConnectionString = "Server=localhost;Integrated Security=True"
      $sqlConn.Open()
      
      $sqlCmd = New-Object System.Data.SqlClient.SqlCommand
      $sqlCmd.Connection = $sqlConn
      $sqlCmd.CommandText = "SELECT name FROM sys.databases WHERE database_id > 4"
      
      $reader = $sqlCmd.ExecuteReader()
      
      while ($reader.Read()) {
          $dbName = $reader["name"]
          $backupFile = "$backupDir\$dbName`_$timestamp.bak"
          
          # Create new SQL connection for backup
          $backupConn = New-Object System.Data.SqlClient.SqlConnection
          $backupConn.ConnectionString = "Server=localhost;Integrated Security=True"
          $backupConn.Open()
          
          $backupCmd = New-Object System.Data.SqlClient.SqlCommand
          $backupCmd.Connection = $backupConn
          $backupCmd.CommandText = "BACKUP DATABASE [$dbName] TO DISK = N'$backupFile' WITH INIT, COMPRESSION, STATS = 10"
          
          Write-Host "Backing up database: $dbName to $backupFile"
          $backupCmd.ExecuteNonQuery()
          
          $backupConn.Close()
      }
      
      $sqlConn.Close()
      
      # Clean up backups older than 7 days
      Get-ChildItem -Path $backupDir -Filter "*.bak" | Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-7) } | Remove-Item -Force

- name: Create scheduled task for database backups
  ansible.windows.win_scheduled_task:
    name: SQL Server Backups
    description: Regular SQL Server database backups to prevent data loss
    actions:
      - path: powershell.exe
        arguments: -ExecutionPolicy Bypass -File C:\SQLScripts\backup_databases.ps1
    triggers:
      - type: daily
        start_boundary: '2023-01-01T02:00:00'
        enabled: true
    username: SYSTEM
    state: present
    enabled: true
    run_level: highest

- name: Create CPU activity script to prevent VM reclamation
  ansible.windows.win_copy:
    dest: C:\SQLScripts\prevent_idle.ps1
    content: |
      # This script performs light CPU activity to prevent the VM from being reclaimed due to inactivity
      # Oracle Cloud may reclaim Free Tier VMs if CPU usage is below 20% for a 7-day period
      
      # Run a simple CPU-consuming task
      $startTime = Get-Date
      $duration = New-TimeSpan -Minutes 5
      
      # Use Get-Process as a simple non-intensive query that still produces some CPU activity
      while ((Get-Date) - $startTime -lt $duration) {
          Get-Process | Sort-Object CPU -Descending | Select-Object -First 10
          Start-Sleep -Seconds 30
      }
      
      # Log activity
      Add-Content -Path C:\SQLScripts\activity_log.txt -Value "Activity run completed at $(Get-Date)"

- name: Create scheduled task for preventing idle reclamation
  ansible.windows.win_scheduled_task:
    name: Prevent Idle Reclamation
    description: Generates activity to prevent VM reclamation due to idleness
    actions:
      - path: powershell.exe
        arguments: -ExecutionPolicy Bypass -File C:\SQLScripts\prevent_idle.ps1
    triggers:
      - type: daily
        start_boundary: '2023-01-01T01:00:00'
        enabled: true
      - type: daily
        start_boundary: '2023-01-01T13:00:00'
        enabled: true
    username: SYSTEM
    state: present
    enabled: true
