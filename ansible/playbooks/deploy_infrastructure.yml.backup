---
- name: Deploy Oracle Cloud Infrastructure
  hosts: localhost
  connection: local
  gather_facts: true

  vars:
    terraform_dir: "{{ playbook_dir }}/../../terraform/environments/dev"
    terraform_vars_file: "{{ terraform_dir }}/terraform.tfvars.json"

  tasks:
    - name: Create terraform.tfvars.json from Ansible variables
      ansible.builtin.copy:
        dest: "{{ terraform_vars_file }}"
        content: |
          {
            "tenancy_ocid": "{{ oci_tenancy_ocid }}",
            "user_ocid": "{{ oci_user_ocid }}",
            "fingerprint": "{{ oci_fingerprint }}",
            "private_key_path": "{{ oci_private_key_path }}",
            "region": "{{ oci_region }}",
            "compartment_id": "{{ oci_compartment_id }}",
            "availability_domain": "{{ availability_domain }}",
            "windows_image_id": "{{ windows_image_id }}",
            "ssh_public_key": "{{ ssh_public_key }}"
          }
        mode: '0600'
      no_log: true

    - name: Initialize Terraform
      ansible.builtin.command: terraform init
      args:
        chdir: "{{ terraform_dir }}"
      changed_when: false

    - name: Run Terraform plan
      ansible.builtin.command: terraform plan -var-file={{ terraform_vars_file | basename }}
      args:
        chdir: "{{ terraform_dir }}"
      register: terraform_plan
      changed_when: false

    - name: Apply Terraform changes
      ansible.builtin.command: terraform apply -auto-approve -var-file={{ terraform_vars_file | basename }}
      args:
        chdir: "{{ terraform_dir }}"
      register: terraform_apply
      changed_when: false

    - name: Get Terraform outputs
      ansible.builtin.command: terraform output -json
      args:
        chdir: "{{ terraform_dir }}"
      register: terraform_output
      changed_when: false

    - name: Parse Terraform outputs
      ansible.builtin.set_fact:
        terraform_outputs: "{{ terraform_output.stdout | from_json }}"

    - name: Set Windows VM IP
      ansible.builtin.set_fact:
        windows_vm_ip: "{{ terraform_outputs.windows_vm_public_ip.value }}"

    - name: Update Ansible inventory with Windows VM IP
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../templates/hosts.j2"
        dest: "{{ playbook_dir }}/../inventory/hosts"
        mode: '0644'

    - name: Reset Windows admin password
      ansible.windows.win_shell: |
        $user = [adsi]"WinNT://./Administrator"
        $user.SetPassword("{{ windows_admin_password }}")
      delegate_to: "{{ windows_vm_ip }}"
      vars:
        ansible_user: opc
        ansible_password: "{{ windows_admin_password }}"
        ansible_connection: winrm
        ansible_winrm_server_cert_validation: ignore
      changed_when: false
