---
- name: Deploy SQL Server Infrastructure to Azure
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    terraform_dir: "{{ playbook_dir }}/../../terraform/environments/dev"
    terraform_vars_file: "{{ terraform_dir }}/terraform.tfvars.json"

  pre_tasks:
    - name: Include variables from vars.yml
      ansible.builtin.include_vars:
        file: "{{ playbook_dir }}/../group_vars/all/vars.yml"
      tags: always

    - name: Include variables from vault.yml
      ansible.builtin.include_vars:
        file: "{{ playbook_dir }}/../group_vars/all/vault.yml"
      tags: always

  tasks:
    - name: Ensure ~/.azure directory exists
      ansible.builtin.file:
        path: ~/.azure
        state: directory
        mode: '0700'

    - name: Check if Azure CLI is installed
      ansible.builtin.command: az --version
      register: az_cli_check
      ignore_errors: true
      changed_when: false

    - name: Fail if Azure CLI is not installed
      ansible.builtin.fail:
        msg: "Azure CLI is not installed. Please install it and try again."
      when: az_cli_check.rc != 0

    - name: Check if Terraform is installed
      ansible.builtin.command: terraform --version
      register: terraform_check
      ignore_errors: true
      changed_when: false

    - name: Fail if Terraform is not installed
      ansible.builtin.fail:
        msg: "Terraform is not installed. Please install it and try again."
      when: terraform_check.rc != 0

    - name: Create terraform.tfvars.json from Ansible variables
      ansible.builtin.copy:
        dest: "{{ terraform_vars_file }}"
        content: |
          {
            "subscription_id": "{{ azure_subscription_id }}",
            "tenant_id": "{{ azure_tenant_id }}",
            "client_id": "{{ azure_client_id }}",
            "client_secret": "{{ azure_client_secret }}",
            "location": "{{ azure_location }}",
            "resource_group_name": "{{ azure_resource_group_name }}",
            "admin_username": "{{ azure_admin_username }}",
            "admin_password": "{{ azure_admin_password }}",
            "vm_size": "{{ azure_vm_size }}",
            "ssh_public_key": "{{ ssh_public_key }}"
          }
        mode: '0600'
      no_log: true

    - name: Initialize Terraform
      ansible.builtin.command: terraform init
      args:
        chdir: "{{ terraform_dir }}"
      register: terraform_init
      changed_when: terraform_init.rc == 0

    - name: Run Terraform plan
      ansible.builtin.command: terraform plan -out=tfplan -var-file={{ terraform_vars_file | basename }}
      args:
        chdir: "{{ terraform_dir }}"
      register: terraform_plan
      changed_when: terraform_plan.rc == 0

    - name: Apply Terraform changes
      ansible.builtin.command: terraform apply -auto-approve tfplan
      args:
        chdir: "{{ terraform_dir }}"
      register: terraform_apply
      changed_when: terraform_apply.rc == 0

    - name: Get SQL Server public IP
      ansible.builtin.command: terraform output -raw sql_server_public_ip
      args:
        chdir: "{{ terraform_dir }}"
      register: sql_server_ip
      changed_when: false

    - name: Get SQL Server public IP from Azure CLI if terraform output is empty
      ansible.builtin.command: az vm list-ip-addresses --resource-group {{ azure_resource_group_name }} --name sqlserver-dev --query "[0].virtualMachine.network.publicIpAddresses[0].ipAddress" -o tsv
      register: az_ip
      changed_when: false
      when: sql_server_ip.stdout == ""

    - name: Set SQL Server IP variable
      ansible.builtin.set_fact:
        server_ip: "{{ az_ip.stdout if sql_server_ip.stdout == '' else sql_server_ip.stdout }}"

    - name: Wait for WinRM to become available
      ansible.builtin.wait_for:
        host: "{{ server_ip }}"
        port: 5986
        delay: 60
        timeout: 600
      register: winrm_check
      failed_when: false

    - name: Display connection information
      ansible.builtin.debug:
        msg:
          - "SQL Server VM deployed successfully!"
          - "Public IP: {{ server_ip }}"
          - "SQL Server connection: Server={{ server_ip }};Integrated Security=true;"
          - "RDP connection: mstsc /v:{{ server_ip }}"

    - name: Add SQL Server to inventory
      ansible.builtin.add_host:
        name: "{{ server_ip }}"
        groups: sql_servers
        ansible_user: "{{ azure_admin_username }}"
        ansible_password: "{{ azure_admin_password }}"
        ansible_connection: winrm
        ansible_winrm_server_cert_validation: ignore

    - name: Create inventory file for future use
      ansible.builtin.copy:
        dest: "{{ playbook_dir }}/../inventory/hosts"
        content: |
          [windows]
          sqlserver ansible_host={{ server_ip }}

          [windows:vars]
          ansible_user={{ azure_admin_username }}
          ansible_password={{ azure_admin_password }}
          ansible_connection=winrm
          ansible_winrm_server_cert_validation=ignore
          ansible_winrm_transport=basic
          ansible_port=5985
        mode: '0644'
